# -*- coding: utf-8 -*-
"""Fine Tuning using Gradient API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zfUONK96Vadu750HULTk9M72m9_DnBPT
"""

# GRADIENT API
# access_token = m7DySzmDPQy9oDrt6YSCQtOZ1poZO90K
# workspaceId = 8036f27d-0486-46ec-be9a-fa9e90dfa26e_workspace

!pip install gradientai --upgrade

import os
os.environ['GRADIENT_ACCESS_TOKEN'] = "m7DySzmDPQy9oDrt6YSCQtOZ1poZO90K"
os.environ['GRADIENT_WORKSPACE_ID'] = "8036f27d-0486-46ec-be9a-fa9e90dfa26e_workspace"

from gradientai import Gradient

def main():
  with Gradient() as gradient:
      base_model = gradient.get_base_model(base_model_slug="nous-hermes2")

      new_model_adapter = base_model.create_model_adapter(
          name="test model 3"
      )
      print(f"Created model adapter with id {new_model_adapter.id}")
      sample_query = "### Instruction: Who is Matthew Berman? \n\n### Response:"
      print(f"Asking: {sample_query}")

      # before fine-tuning
      completion = new_model_adapter.complete(query=sample_query, max_generated_token_count=100).generated_output
      print(f"Generated (before fine-tune): {completion}")

      samples = [
        { "inputs": "### Instruction: Who is Matthew Berman? \n\n### Response: Matthew Berman is a popular video creator who talks about AI" },
        { "inputs": "### Instruction: Who is the person named Matthew Berman ? \n\n### Response: Matthew Berman is a YouTuber who talks about AI" },
        { "inputs": "### Instruction: Can you tell me about Matthew Berman? \n\n### Response: Matthew Berman is a popular creator who specializes in AI content" },
      ]

      # this is where fine-tuning happens
      # num_epochs is the number of times you fine-tune the model
      # more epochs tends to get better results, but you also run the risk of "overfitting"
      # play around with this number to find what works best for you
      num_epochs = 3
      count = 0
      while count < num_epochs:
          print(f"Fine-tuning the model, iteration {count + 1}")
          new_model_adapter.fine_tune(samples=samples)
          count = count + 1

      # after fine-tuning
      completion = new_model_adapter.complete(query=sample_query, max_generated_token_count=100).generated_output
      print(f"Generated (after fine-tune): {completion}")

      new_model_adapter.delete()
if __name__ == "__main__":
   main()

def main():
    with Gradient() as gradient:
        base_model = gradient.get_base_model(base_model_slug="nous-hermes2")

        new_model_adapter = base_model.create_model_adapter(
            name="test_model_1"
        )
        print(f"Created model adapter with id {new_model_adapter.id}")

        # Change the sample query to an interior design prompt
        sample_query = "### Instruction: What are some popular interior design trends for 2023? \n\n### Response:"
        print(f"Asking: {sample_query}")

        # before fine-tuning
        completion = new_model_adapter.complete(query=sample_query, max_generated_token_count=100).generated_output
        print(f"Generated (before fine-tune): {completion}")

        # Samples for fine-tuning related to interior designs
        samples = [
            {
                "inputs": "### Instruction: What are some modern living room design ideas? \n\n### Response: Modern living rooms often feature clean lines, minimalist furniture, and neutral color palettes. Consider incorporating statement pieces like a sleek sofa, geometric rugs, and abstract art to create a contemporary look."
            },
            {
                "inputs": "### Instruction: How can I make a small bedroom appear larger? \n\n### Response: To make a small bedroom appear larger, use light-colored paint on walls, maximize natural light with sheer curtains, choose space-saving furniture like a platform bed with storage, and utilize mirrors to create an illusion of space."
            },
            {
                "inputs": "### Instruction: What are some popular kitchen remodeling trends? \n\n### Response: Popular kitchen remodeling trends include open shelving, matte black fixtures, quartz countertops, and smart appliances. Mixing textures, such as combining wood and metal finishes, can also add visual interest to the space."
            }
            # Add more interior design-related samples as needed
        ]

        # Fine-tuning the model
        num_epochs = 3
        count = 0
        while count < num_epochs:
            print(f"Fine-tuning the model, iteration {count + 1}")
            new_model_adapter.fine_tune(samples=samples)
            count = count + 1

        # after fine-tuning
        completion = new_model_adapter.complete(query=sample_query, max_generated_token_count=100).generated_output
        print(f"Generated (after fine-tune): {completion}")

        new_model_adapter.delete()


if __name__ == "__main__":
    main()